@model EmployeeEvaluationSystem.MVC.Models.StartEvaluationViewModel
@{
    ViewBag.Title = "StartEvaluation";
}

<h2>Start Evaluation</h2>

@*<script>
    $(document).ready(function () {
        $("#survey_date_1").datepicker({ dateFormat: 'dd/mm/yy' });
        $("#survey_date_2").datepicker({ dateFormat: 'dd/mm/yy' });
    });
</script>*@

<script type="text/javascript">
    (function () {
        StartEvaluationHelper = {};

        StartEvaluationHelper.SaveAndSubmit = function (survPageId, survTypePageId, surveyId, surveyTypeId) {
            debugger;
            if (survPageId != null) {
                survPageId.value = surveyId;
            }

            if (survTypePageId != null) {
                survTypePageId.value = surveyTypeId;
            }

            document.getElementById("surveyform").submit();
        };

        StartEvaluationHelper.SetAsDate = function (dobj) {
            debugger;
            var realId = dobj.id;
            $("#" + realId).datepicker({ dateFormat: 'dd/mm/yy' });
        };



    })();
</script>
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "surveyform" }))
{
<div class="form-horizontal">
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="form-group">
        @Html.LabelFor(m => m.DateOpen, "Open Date", new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.EditorFor(m => m.DateOpen, new { id = "survey_date_1", @class = "form-control a_survey_date", type = "date" })
            <script>
                StartEvaluationHelper.SetAsDate(@("DateOpen"));
            </script>
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.DateClosed, "Close Date", new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.EditorFor(m => m.DateClosed, new { id = "survey_date_2", @class = "form-control", type = "date" })
            <script>
                StartEvaluationHelper.SetAsDate(@("DateClosed"));
            </script>
        </div>
    </div>

    @Html.HiddenFor(m => m.CohortID)

    <h4>Required Rater Quantities:</h4>

    @for (var i = 0; i < Model.RoleQuantities.Count; i++)
    {





        <div class="form-group">
            @Html.HiddenFor(x => x.RoleQuantities[i].Id)
            <label class="col-md-3">
            Quantity for @(Model.RoleQuantities[i].DisplayName):</label>
            <div class="col-md-3">
                @if (Model.RoleQuantities[i].CanChange)
                {
                    @Html.EditorFor(x => x.RoleQuantities[i].Quantity)
                }
                else
                {
                    @(Model.RoleQuantities[i].Quantity)
                }

            </div>
        </div>

    }




    @*@foreach (var surveyItem in Model.Surveys)
    {
        <table class="table">
            <caption>@surveyItem.Name Evaluations</caption>
            <tr>
                @foreach (var surveyTypeItem in Model.SurveyTypes)
                {
                    <th>
                        @(Model.AssignedSurveys.FirstOrDefault(x => x.Value.Item1 == surveyItem && x.Value.Item2 == surveyTypeItem)
                    </th>
                }
            </tr>
        </table>
    }*@


    @Html.HiddenFor(m => m.SurveyTypeID)
    @Html.HiddenFor(m => m.SurveyID)

    @foreach (var surveyItem in Model.NewSurveys)
    {
        <table class="table">
            <caption>@surveyItem.TheSurvey.Name Evaluations</caption>
            <tr>
                <th>
                    @(surveyItem.TheSurveyType.Name) - 

                    @if (surveyItem.TheState == EmployeeEvaluationSystem.MVC.Models.StartEvaluationViewModel.SurveyState.AVAILABLE)
                    {
                        //Model.SurveyTypeID = surveyItem.TheSurveyType.ID;
                        @*@Html.ActionLink("Assign Survey", "StartEvaluation", "Cohort", new { model = Model }, new { @class = "btn btn-success btn-sm" })*@
                        <button type="button" class="btn btn-success" onclick="StartEvaluationHelper.SaveAndSubmit(@("SurveyID"), @("SurveyTypeID"), @(surveyItem.TheSurvey.ID),@(surveyItem.TheSurveyType.ID))">Assign Survey</button>
                    }
                    else if (surveyItem.TheState == EmployeeEvaluationSystem.MVC.Models.StartEvaluationViewModel.SurveyState.IN_PROGRESS)
                    {
                       <button type="button" class="btn btn-primary btn-sm">In Progress - Cannot Assign New Survey</button>
                    }
                    else {
                        <text>How did this happen?</text>
                    }
                </th>
            </tr>
        </table>
    }
    </div>}